var app = angular.module("FireFoxMarket", [ "ui.router", "LocalStorageModule" ]);

app.config(function($stateProvider, $urlRouterProvider) {
    $urlRouterProvider.otherwise("/"), $stateProvider.state("home", {
        url: "/",
        templateUrl: "/templates/home.html"
    });
}), app.controller("main", function($window, $rootScope, API, localStorageService) {
    if (localStorageService.get("loggedin")) {
        {
            localStorageService.get("loggedin");
        }
        $rootScope.loggedin = !0;
    }
    $rootScope.login = function() {};
}), app.factory("API", [ "Utils", "$http", function(Utils, $http) {
    function request(endpoint, callback, parameters) {
        for (var i in routes) if (i === endpoint) {
            var request_url = "";
            if (request_url += base += routes[endpoint], -1 !== request_url.search("-")) {
                if (void 0 === parameters) {
                    var params = routes[endpoint].split("-"), needed_param = "";
                    switch (params.length) {
                      case 2:
                        needed_param = params[1];
                    }
                    return console.error("The selected route requires a parameter of : " + needed_param), 
                    !1;
                }
                var url = request_url.split("-"), temp = url[0];
                request_url = temp + parameters;
            }
            $http({
                method: "GET",
                url: request_url
            }).success(function(data, status, headers, config) {
                data && callback(data, status, headers, config);
            }).error(function(data, status, headers, config) {
                console.error("Issue with HTTP request"), console.log(data, status, headers, config);
            });
        }
    }
    var routes = {
        app: "/api/v1/fireplace/app/{0}/?cache=1&vary=0",
        "app/privacy": "/api/v1/apps/app/{0}/privacy/?cache=1&vary=0",
        category: "/api/v1/fireplace/search/featured/?cat={0}&cache=1&vary=0",
        collection: "/api/v1/fireplace/collection/{0}/?cache=1&vary=0",
        reviews: "/api/v1/apps/rating/",
        review: "/api/v1/apps/rating/{0}/",
        settings: "/api/v1/account/settings/mine/",
        installed: "/api/v1/account/installed/mine/",
        login: "/api/v1/account/login/",
        "fxa-login": "/api/v1/account/fxa-login/",
        logout: "/api/v1/account/logout/",
        newsletter: "/api/v1/account/newsletter/",
        record_free: "/api/v1/installs/record/",
        record_paid: "/api/v1/receipts/install/",
        app_abuse: "/api/v1/abuse/app/",
        search: "/api/v1/fireplace/search/?cache=1&vary=0",
        feedback: "/api/v1/account/feedback/",
        consumer_info: "/api/v1/fireplace/consumer-info/",
        features: "/api/v1/apps/features/",
        prepare_nav_pay: "/api/v1/webpay/prepare/",
        payments_status: "/api/v1/webpay/status/{0}/",
        collections: "/api/v2/feed/collections/",
        collections_detail: "/api/v2/feed/collections/-id"
    }, base = "https://marketplace.firefox.com";
    return {
        request: request
    };
} ]), app.factory("keys", function() {
    return {
        SHIFT: 16,
        CONTROL: 17,
        ALT: 18,
        PAUSE: 19,
        CAPS_LOCK: 20,
        ESCAPE: 27,
        ENTER: 13,
        PAGE_UP: 33,
        PAGE_DOWN: 34,
        LEFT: 37,
        UP: 38,
        RIGHT: 39,
        DOWN: 40,
        HOME: 36,
        END: 35,
        COMMAND: 91,
        WINDOWS_RIGHT: 92,
        COMMAND_RIGHT: 93,
        WINDOWS_LEFT_OPERA: 219,
        WINDOWS_RIGHT_OPERA: 220,
        APPLE: 24
    };
}), app.factory("Market", [ "$http", "API", function() {} ]), app.factory("Utils", function() {
    function baseurl(url) {
        return url.split("?")[0];
    }
    function encodeURIComponent(uri) {
        return window.encodeURIComponent(uri).replace(/%20/g, "+");
    }
    function decodeURIComponent(uri) {
        return window.decodeURIComponent(uri.replace(/\+/g, " "));
    }
    function urlparams(url, kwargs) {
        return baseurl(url) + "?" + urlencode(_.defaults(kwargs, querystring(url)));
    }
    return {
        baseurl: baseurl,
        encodeURIComponent: encodeURIComponent,
        decodeURIComponent: decodeURIComponent,
        urlparams: urlparams
    };
}), app.controller("myapps", function() {
    navigator.mozApps.getInstalled();
}), app.controller("home", [ "$rootScope", "API", function($rootScope, API) {
    $rootScope.BASE_URL;
    API.request("collections", function(data) {
        console.log(data);
    });
} ]);