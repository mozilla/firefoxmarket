var app = angular.module("FirefoxMarket", [ "ui.router", "LocalStorageModule" ]);

app.config(function($stateProvider, $urlRouterProvider, $locationProvider, $httpProvider) {
    $urlRouterProvider.otherwise("/"), $locationProvider.html5Mode(!0), $stateProvider.state("home", {
        url: "/",
        templateUrl: "/build/templates/home.html",
        onEnter: function() {
            document.querySelector("#searchbutton").style.display = "none";
        },
        onExit: function() {
            document.querySelector("#searchbutton").style.display = "inline-block";
        }
    }), $stateProvider.state("categories", {
        url: "/categories",
        templateUrl: "/build/templates/categories.html",
        controller: "AllCategoriesController"
    }), $stateProvider.state("AppNotFound", {
        url: "/app/notfound",
        templateUrl: "/templates/apps/404.jade"
    }), $stateProvider.state("AppView", {
        url: "/app/:name",
        templateUrl: function() {
            return "/build/templates/apps/appview.html";
        },
        controller: "AppViewController"
    }), $stateProvider.state("CategoryView", {
        url: "/category/:name",
        templateUrl: function() {
            return "/build/templates/apps/catview.html";
        },
        controller: "CategoryViewController"
    }), $stateProvider.state("AppDeveloperView", {
        url: "/developer/:name",
        templateUrl: function() {
            return "/build/templates/apps/appDevView.html";
        },
        controller: "AppDeveloperController"
    }), delete $httpProvider.defaults.headers.common["X-Requested-Width"];
}), app.controller("main", function($window, $rootScope, API, localStorageService, $http, $scope) {
    $rootScope.menuOpen = !1;
    var MENU_HEIGHT = 300;
    if (localStorageService.get("loggedin")) {
        {
            localStorageService.get("loggedin");
        }
        $rootScope.loggedin = !0;
    }
    $scope.login = function() {
        navigator.id.request();
    };
    var s = setInterval(function() {
        var username = document.querySelector("#username");
        null !== username && (null !== localStorage.getItem("username") && void 0 !== localStorage.getItem("username") ? (console.log("user is logged in", localStorage.getItem("username")), 
        username.innerHTML = localStorage.getItem("username")) : console.log("user is not logged in"), 
        clearInterval(s));
    }, 100);
    navigator.id.watch({
        loggedInUser: "",
        onlogin: function(assertation) {
            $.post("https://marketplace.firefox.com/api/v1/account/login/", {
                assertion: assertation,
                audience: window.location.origin
            }, function(data) {
                $rootScope.USER = data;
                var username = document.querySelector("#username");
                TweenMax.to(username, 1, {
                    opacity: 0,
                    onComplete: function() {
                        console.log("Username is :", data.settings.display_name), username.innerHTML = data.settings.display_name, 
                        localStorage.setItem("username", data.settings.display_name), localStorage.setItem("email", data.settings.email), 
                        localStorage.setItem("token", data.token), localStorage.setItem("installed_apps", data.apps.installed), 
                        localStorage.setItem("purchased_apps", data.apps.purchaed), localStorage.setItem("developed_apps", data.apps.developed);
                        for (var i in data.permissions) localStorage.setItem(i, data[i]);
                        TweenMax.to(username, 1, {
                            opacity: 1
                        });
                    }
                });
            });
        },
        onlogout: function() {
            $rootScope.USER = null;
        }
    }), $rootScope.loaded = function(callback) {
        TweenMax.to(document.querySelector("#loader"), .2, {
            opacity: 0,
            onComplete: function() {
                callback && callback();
            }
        });
    }, $rootScope.openMenu = function() {
        var burger = document.querySelector("#menu-trigger"), menu = 0;
        $rootScope.menuOpen === !1 ? (TweenMax.to(burger.children[0], .5, {
            transform: "rotateZ(45deg)",
            marginTop: "5px",
            ease: "Power3.easeInOut"
        }), TweenMax.to(burger.children[2], .5, {
            opacity: 0,
            ease: "Power3.easeInOut"
        }), TweenMax.to(burger.children[1], .5, {
            transform: "rotateZ(-45deg)",
            marginTop: "-6px",
            ease: "Power3.easeInOut"
        }), menu = document.querySelector("#user-details"), menu.className = "open", TweenMax.to(menu, 1, {
            height: MENU_HEIGHT
        }), $rootScope.menuOpen = !0) : (TweenMax.to(burger.children[0], .5, {
            transform: "rotateZ(0deg)",
            marginTop: "0px",
            ease: "Power3.easeInOut"
        }), TweenMax.to(burger.children[2], .5, {
            opacity: 1,
            ease: "Power3.easeInOut"
        }), TweenMax.to(burger.children[1], .5, {
            transform: "rotateZ(0deg)",
            marginTop: "0px",
            ease: "Power3.easeInOut"
        }), menu = document.querySelector("#user-details"), menu.className = "", TweenMax.to(menu, 1, {
            height: 45,
            ease: "Power3.easeInOut"
        }), $rootScope.menuOpen = !1);
    }, $rootScope.lockBody = function() {
        console.log("body locked"), TweenMax.to(window, .5, {
            scrollTo: {
                y: 0
            },
            ease: "Power3.easeInOut"
        }), document.getElementsByTagName("html")[0].style.overflow = "hidden";
    }, $rootScope.unlockBody = function() {
        document.getElementsByTagName("html")[0].style.overflow = "scroll";
    }, $rootScope.filterName = function(app) {
        var name = "";
        if (app.name.hasOwnProperty(navigator.language)) name = app.name[navigator.language]; else for (var z in app.name) name = app.name[z];
        return name;
    };
}), angular.module("gettext").run([ "gettextCatalog", function(gettextCatalog) {
    gettextCatalog.setStrings("en_US", {
        "Featured Apps": "Featured Apps"
    });
} ]), app.factory("API", [ "Utils", "$http", "$q", "$timeout", function(Utils, $http, $q, $timeout) {
    function request(endpoint, params, extradata) {
        var deferred = $q.defer(), extra = null;
        return void 0 !== extradata && (extra = extradata), $timeout(function() {
            void 0 === params && (params = ""), $http({
                method: "GET",
                url: base + routes[endpoint] + params
            }).success(function(data) {
                data && deferred.resolve(data, routes[endpoint] + params);
            }).error(function(data, status, headers, config) {
                deferred.resolve(data, status, headers, config);
            });
        }, 100), deferred.promise;
    }
    var routes = {
        featured: "/api/v1/fireplace/search/featured/?limit=100",
        app_detail: "/api/v1/apps/app/",
        apps_in_category: "/api/v1/apps/search/?cat=",
        search: "/api/v1/apps/search/",
        collections_detail: "/api/v2/feed/collections/",
        categories: "/api/v1/apps/category/",
        ratings: "/api/v1/apps/rating/",
        abuse: "/api/v1/abuse/app/",
        review: "/api/v1/apps/rating/?_user="
    }, base = "https://marketplace.firefox.com";
    return {
        request: request
    };
} ]), app.factory("AgeRatingLookup", function() {
    var rules = {
        general: {
            img: "/img/content_ratings/generic/general.png"
        },
        bodies: [ {
            name: "generic",
            rating_types: [ {
                name: "three",
                rating: "3",
                img: "/img/content_ratings/generic/general.png"
            } ]
        }, {
            name: "esrb",
            rating_types: [ {
                name: "Early Childhood",
                slug: "childhood",
                img: ""
            }, {
                name: "Everyone",
                slug: "everyone",
                img: "/img/content_ratings/esrb/everyone.png"
            }, {
                name: "Everyone 10+",
                img: "",
                slug: "everyone10",
                ratingNumber: 10
            }, {
                name: "Teen",
                img: "",
                slug: "teen"
            }, {
                name: "Mature",
                img: "/img/content_ratings/esrb/mature.png",
                slug: "mature",
                ratingNumber: 17
            } ]
        } ]
    }, API = {
        getImage: function(app) {
            var ratings = app.content_ratings, image = "";
            switch (ratings.body) {
              case "generic":
                for (var types = rules.bodies[0].rating_types, i = 0; i < types.length; ++i) types[i].rating === ratings.rating ? (console.log(types[i]), 
                image = types[i].img) : image = rules.general.img;
                break;

              case "esrb":
                for (var rule = rules.bodies[1], i = 0; i < rule.rating_types.length; ++i) image = rule.rating_types[i].ratingNumber === ratings.rating ? rule.rating_types[i].img : rules.general.img;
            }
            return image;
        }
    };
    return API;
}), app.factory("keys", function() {
    return {
        SHIFT: 16,
        CONTROL: 17,
        ALT: 18,
        PAUSE: 19,
        CAPS_LOCK: 20,
        ESCAPE: 27,
        ENTER: 13,
        PAGE_UP: 33,
        PAGE_DOWN: 34,
        LEFT: 37,
        UP: 38,
        RIGHT: 39,
        DOWN: 40,
        HOME: 36,
        END: 35,
        COMMAND: 91,
        WINDOWS_RIGHT: 92,
        COMMAND_RIGHT: 93,
        WINDOWS_LEFT_OPERA: 219,
        WINDOWS_RIGHT_OPERA: 220,
        APPLE: 24
    };
}), app.factory("MasterSearch", function($http) {
    var query = "", $scope = null, API = {
        search: function() {
            TweenMax.to(document.getElementById("searchresults"), 1, {
                top: 0,
                ease: "Power3.easeInOut",
                onComplete: function() {
                    $rootScope.lockBody();
                }
            });
        },
        query: function(_$scope, term) {
            if ($scope = _$scope, void 0 === term) {
                var term = window.document.querySelector("#homesearch") || window.document.querySelector("#search");
                if ("" === term.value) return console.log("no search term entered"), !1;
                query = term.value;
            }
            $http({
                method: "GET",
                url: "https://marketplace.firefox.com/api/v1/apps/search/?q=" + query
            }).success(function(data) {
                var author_results = API.filter(API.parseDeveloper(data.objects)), name_results = API.filter(API.parseName(data.objects)), category_results = API.filter(API.parseCategories(data.objects)), description_results = API.filter(API.parseDescriptions(data.objects));
                $scope.author_results = author_results, $scope.name_results = name_results, $scope.category_results = category_results, 
                $scope.description_results = description_results, console.log(author_results[0], name_results[0], category_results[0], description_results[0]);
            }).error(function(data) {
                console.log(data), console.error("Something went wrong with the search");
            });
        },
        parseDeveloper: function(appset) {
            for (var len = appset.length, newset = [], i = 0; len > i; ++i) {
                var app = appset[i];
                -1 !== app.author.toLowerCase().search(query) && newset.push(app);
            }
            return newset;
        },
        parseName: function(appset) {
            for (var len = appset.length, newset = [], i = 0; len > i; ++i) {
                var app = appset[i];
                app.name.hasOwnProperty(navigator.language) && app.name[navigator.language].search(query) && newset.push(app);
            }
            return newset;
        },
        parseCategories: function(appset) {
            for (var len = appset.length, newset = [], i = 0; len > i; ++i) for (var app = appset[i], a = 0; a < app.categories.length; ++a) app.categories[a].match(query) && newset.push(app);
            return newset;
        },
        parseDescriptions: function(appset) {
            for (var len = appset.length, newset = [], i = 0; len > i; ++i) {
                var app = appset[i];
                if (app.description.hasOwnProperty(navigator.language)) {
                    var description = app.description[navigator.language];
                    description.match(query) && newset.push(app);
                }
            }
            return newset;
        },
        filter: function(appset) {
            for (var len = appset.length, newset = [], i = 0; len - 1 > i; ++i) {
                var app = appset[i], name = app.name[navigator.language], icon = app.icons[64], ratings = app.ratings.average, id = app.id;
                newset.push({
                    name: name,
                    icon: icon,
                    id: id,
                    author: app.author,
                    rating: ratings
                });
            }
            return newset;
        }
    };
    return API;
}), app.factory("Utils", function() {
    function baseurl(url) {
        return url.split("?")[0];
    }
    function encodeURIComponent(uri) {
        return window.encodeURIComponent(uri).replace(/%20/g, "+");
    }
    function decodeURIComponent(uri) {
        return window.decodeURIComponent(uri.replace(/\+/g, " "));
    }
    function urlparams(url, kwargs) {
        return baseurl(url) + "?" + urlencode(_.defaults(kwargs, querystring(url)));
    }
    return {
        baseurl: baseurl,
        encodeURIComponent: encodeURIComponent,
        decodeURIComponent: decodeURIComponent,
        urlparams: urlparams
    };
}), app.directive("abusedirective", [ "API", "$http", function(API, $http) {
    return {
        templateUrl: "/build/templates/Abuse.html",
        controller: function($scope) {
            $scope.sendReport = function() {};
        },
        link: function($scope, $el) {
            $scope.submitAbuse = function() {
                var id = window.location.href.split("/");
                id = id[id.length - 1];
                var abuse = $el[0].children[0].getElementsByTagName("textarea")[0];
                console.log(abuse.value);
                var request = $http({
                    method: "post",
                    url: "https://marketplace.firefox.com/api/v2/abuse/app/?lang=en-US&limit=25&region=us",
                    data: {
                        text: abuse.value,
                        app: id,
                        sprout: "potato"
                    }
                });
                request.error(function() {
                    console.log("problem submitting request");
                });
            };
        }
    };
} ]), app.directive("appreviews", [ "API", "$filter", function(API, $filter) {
    return {
        templateUrl: "/build/templates/apps/rating.html",
        link: function($scope, $el, $attr) {
            var appid = $attr.appid;
            API.request("ratings", "?app=" + appid).then(function(data) {
                for (var i = 0; i < data.objects.length; ++i) {
                    var review = data.objects[i];
                    review.body = $filter("LongCopyFilter")(review.body), $scope.copy = review.body, 
                    $scope.rating = review.rating, $scope.username = review.user.display_name;
                }
            });
        }
    };
} ]), app.directive("uicontrols", [ "$location", "$window", function($location, $window) {
    return {
        templateUrl: "/build/templates/buttons.html",
        controller: function() {},
        link: function($scope) {
            $scope.clickBack = function() {
                $window.history.back();
            }, $scope.clickForward = function() {
                $window.history.forward();
            };
        }
    };
} ]), app.directive("categoryapps", [ "API", "$rootScope", function(API, $rootScope) {
    return {
        templateUrl: "/build/templates/apps/categoryapps.html",
        controller: function($scope) {
            $scope.$on("CATEGORY_RECENT", function() {
                for (var popular = document.getElementsByClassName("popular-category"), recent = document.getElementsByClassName("recent-category"), a = 0; a < popular.length; ++a) popular[a].style.display = "none";
                for (var i = 0; i < recent.length; ++i) recent[i].style.display = "block";
            }), $scope.$on("CATEGORY_POPULAR", function() {
                for (var popular = document.getElementsByClassName("popular-category"), recent = document.getElementsByClassName("recent-category"), a = 0; a < popular.length; ++a) popular[a].style.display = "block";
                for (var b = 0; b < recent.length; ++b) recent[b].style.display = "none";
            }), $scope.initPurchase = function(app_type, manifest) {
                var req = "";
                if (-1 === navigator.userAgent.search("Firefox")) return void alert("We're sorry, but apps within the Firefox Marketplace can only be downloaded from the Firefox browser");
                var final_manifest = "";
                final_manifest = void 0 !== manifest ? manifest : $scope.manifest, "hosted" === app_type ? req = navigator.mozApps.install(final_manifest) : "packaged" === app_type && (req = navigator.mozApps.installPackage(final_manifest)), 
                req.onsuccess = function() {
                    console.log("Install process initiated");
                }, req.onerror = function() {
                    console.log("Install process failed");
                };
            };
        },
        link: function($scope, $el, $attrs) {
            var categoryname = $attrs.categoryname, limit = $attrs.limit || 5, params = "?cat=" + categoryname + "&sort=rating";
            API.request("search", params).then(function(data) {
                for (var apps = data.objects, shown_apps = [], i = (document.getElementsByClassName("category-title"), 
                0); limit > i; ++i) {
                    var app = apps[i];
                    shown_apps.push({
                        icon: app.icons[128],
                        id: app.id,
                        app_type: app.premium_type,
                        manifest_url: app.manifest_url,
                        category_name: app.categories,
                        author: app.author,
                        premium_type: app.premium_type.charAt(0).toUpperCase() + app.premium_type.slice(1),
                        name: $rootScope.filterName(app),
                        rating: app.ratings.average
                    });
                }
                localStorage.setItem("home_category_popular_apps", JSON.stringify(shown_apps)), 
                $scope.capps = shown_apps;
            });
            var params2 = "?cat=" + categoryname + "&sort=created";
            API.request("search", params2).then(function(data) {
                for (var apps = data.objects, shown_apps = [], i = (document.getElementsByClassName("category-title"), 
                0); limit > i; ++i) {
                    var app = apps[i];
                    shown_apps.push({
                        icon: app.icons[128],
                        id: app.id,
                        app_type: app.premium_type,
                        manifest_url: app.manifest_url,
                        category_name: app.categories,
                        author: app.author,
                        premium_type: app.premium_type.charAt(0).toUpperCase() + app.premium_type.slice(1),
                        name: $rootScope.filterName(app),
                        rating: app.ratings.average
                    });
                }
                shown_apps = shown_apps.reverse(), localStorage.setItem("home_category_recent_apps", JSON.stringify(shown_apps)), 
                $scope.recent_capps = shown_apps;
            });
        }
    };
} ]), app.directive("appreview", [ "$http", function($http) {
    return {
        templateUrl: "/build/templates/Review.html",
        controller: function() {},
        link: function($scope, $el, $attrs) {
            var id = window.location.href.split("/");
            id = id[id.length - 1], $scope.name = $attrs.name, $scope.submitReview = function() {
                var content = $el[0].querySelector("textarea"), rating = $el[0].querySelector("input").value;
                rating = parseInt(rating), (rating > 5 || isNaN(rating)) && (rating = 5), console.log(parseInt(id));
                var data = {
                    app: parseInt(id),
                    body: content.value,
                    rating: rating
                };
                $http({
                    method: "post",
                    url: "https://marketplace.firefox.com/api/v1/apps/rating/",
                    data: data
                }).success(function() {
                    console.log("success");
                }).error(function() {
                    console.log("something went wrong");
                });
            };
        }
    };
} ]), app.directive("appsearch", [ "$http", "$rootScope", "MasterSearch", function($http, $rootScope) {
    return {
        templateUrl: "/templates/searchbox.html",
        controller: function() {},
        link: function($scope) {
            $scope.search = function() {
                TweenMax.to(document.getElementById("searchresults"), 1, {
                    top: 0,
                    ease: "Power3.easeInOut",
                    onComplete: function() {
                        $rootScope.lockBody();
                    }
                });
            };
        }
    };
} ]), app.directive("appfeedback", [ "API", function() {
    return {
        templateUrl: "/build/templates/Feedback.html",
        controller: function() {},
        link: function($scope) {
            $scope.sendFeedback = function() {};
        }
    };
} ]), app.directive("starrating", function() {
    return {
        templateUrl: "/build/templates/stars.html",
        controller: function() {},
        link: function($scope, $el, $attr) {
            function applyStars() {
                for (var i = 0; i < starratings.length; ++i) rating > i && (starratings[i].children[0].src = "/img/star_filled.svg");
            }
            var starratings = $el[0].children[0].children[0].children;
            if ("true" === $attr.delay) var s = setInterval(function() {
                "" !== $attr.rating && (rating = parseInt($attr.rating), applyStars(), clearInterval(s));
            }, 100); else {
                var rating = "", stars = $attr.rating;
                if (stars = stars.split("."), 1 == stars.length) rating = stars[0]; else {
                    var decimals = 0;
                    void 0 !== stars[1] && (decimals = stars[1].split("")), rating = parseInt(decimals[0]) >= 5 ? parseInt(stars) + 1 : Math.floor(parseInt(stars));
                }
                applyStars();
            }
        }
    };
}), app.directive("footer", function() {
    return {
        templateUrl: "/build/templates/footer.html",
        controller: function() {},
        link: function($scope) {
            $scope.toTheHub = function() {
                window.open("https://addons.mozilla.org/en-US/developers/", "target=_blank");
            };
        }
    };
}), app.directive("header", function(MasterSearch, $rootScope) {
    return {
        templateUrl: "/build/templates/header.html",
        controller: function() {},
        link: function($scope) {
            for (var i = 0; 3 > i; ++i) {
                var item = document.createElement("div");
                item.className = "burger-element";
                var inner = document.createElement("div");
                inner.className = "innerfill", item.appendChild(inner), document.getElementById("menu-trigger").appendChild(item);
            }
            $scope.returnHome = function() {
                window.location = "/";
            }, $scope.search = function() {
                var search = document.querySelector("#mainsearch");
                TweenMax.to(search, 1, {
                    height: window.innerHeight,
                    ease: "Power3.easeInOut",
                    onComplete: function() {
                        $rootScope.lockBody();
                    }
                });
            }, $scope.closeSearch = function() {
                var search = document.querySelector("#mainsearch");
                TweenMax.to(search, 1, {
                    height: 0,
                    ease: "Power3.easeInOut",
                    onComplete: function() {
                        MasterSearch.query($scope), $rootScope.unlockBody();
                    }
                });
            }, $scope.initPurchase = function(app_type, manifest) {
                var req = "";
                if (-1 === navigator.userAgent.search("Firefox")) return void alert("We're sorry, but apps within the Firefox Marketplace can only be downloaded from the Firefox browser");
                var final_manifest = "";
                final_manifest = void 0 !== manifest ? manifest : $scope.manifest, "hosted" === app_type ? req = navigator.mozApps.install(final_manifest) : "packaged" === app_type && (req = navigator.mozApps.installPackage(final_manifest)), 
                req.onsuccess = function() {
                    console.log("Install process initiated");
                }, req.onerror = function() {
                    console.log("Install process failed");
                };
            }, $scope.searchApp = function() {
                MasterSearch.query($scope);
            };
        }
    };
}), app.directive("login", [ "$http", function($http) {
    var currentUser = null;
    return {
        templateUrl: "/templates/login.html",
        controller: function() {},
        link: function($scope) {
            $scope.login = function() {
                navigator.id.request();
            }, $scope.logout = function() {
                navigator.id.logout();
            }, navigator.id.watch({
                loggedInUser: currentUser,
                onlogin: function(assertation) {
                    $http.post("/loginassert", {
                        assertation: assertation,
                        audience: window.location.href
                    }).success(function(data) {
                        console.log(data);
                    }).error(function(data) {
                        console.log("issue with verification process"), console.log(data);
                    });
                },
                onlogout: function() {
                    currentUser = null;
                }
            });
        }
    };
} ]), app.controller("AllCategoriesController", [ "API", "$rootScope", "$scope", function(API, $rootScope, $scope) {
    API.request("categories").then(function(data) {
        for (var categories = data.objects, i = 0; i < categories.length; ++i) {
            var category = categories[i];
            API.request("search", "?cat=" + category.slug).then(function() {});
        }
        $scope.appcategories = categories, $rootScope.loaded(function() {
            var parent = document.getElementById("HOME");
            angular.element(parent).removeClass("ajax");
        });
    });
} ]), app.controller("AppDeveloperController", [ "$scope", "API", "$window", function($scope, API, $window) {
    var id = $window.location.href.split("/");
    id = id[id.length - 1], $scope.author = id, API.request("search", "?q=" + id).then(function(data) {
        var objects = data.objects, apps = [];
        console.log(objects);
        for (var i = 0; i < objects.length; ++i) {
            var oapp = objects[i];
            apps.push({
                name: oapp.name[navigator.language],
                rating: oapp.ratings.average,
                author: oapp.author,
                purchase_type: oapp.premium_type.charAt(0).toUpperCase() + oapp.premium_type.slice(1),
                icon: oapp.icons[64],
                id: oapp.id
            });
        }
        $scope.apps = apps;
    });
} ]), app.controller("AppViewController", [ "$window", "API", "$scope", "$rootScope", "$filter", "AgeRatingLookup", "$http", function($window, API, $scope, $rootScope, $filter, AgeRatingLookup, $http) {
    var id = $window.location.href.split("/");
    id = id[id.length - 1], $scope.appid = id, API.request("ratings", "?app=" + id + "&limit=999999").then(function(data) {
        $scope.ratings = data.objects.length + " Reviews";
    }), API.request("app_detail", id + "/").then(function(data) {
        $scope.author = data.author, $scope.categories = data.categories, $scope.category = data.categories[0], 
        $scope.content_ratings = data.content_ratings, $scope.rating = data.ratings.average, 
        console.log(data), $scope.rating_image = AgeRatingLookup.getImage(data), $scope.name = data.name[navigator.language], 
        $scope.version = data.current_version, $scope.icon = data.icons[128];
        for (var previews = [], i = 0; i < data.previews.length; ++i) {
            var preview = {
                image: data.previews[i].image_url,
                thumb: data.previews[i].thumbnail_url
            };
            previews.push(preview);
        }
        $scope.description = data.description[navigator.language], $scope.previews = previews, 
        $scope.privacy = "http://marketplace.firefox.com" + data.privacy_policy, $scope.support_email = data.support_email[navigator.language], 
        $scope.support_url = "" !== data.support_url[navigator.language] ? data.support_url[navigator.language] : !1, 
        $scope.purchase_type = data.premium_type.charAt(0).toUpperCase() + data.premium_type.slice(1), 
        $scope.versions = data.versions, $scope.release_notes = data.release_notes, $scope.manifest = data.manifest_url, 
        $scope.package_path = data.package_path, $rootScope.loaded(), $scope.app_type = data.app_type, 
        API.request("search", "?q=" + data.author).then(function(odata) {
            var objects = odata.objects, apps = [];
            if (objects.length > 0 && apps.length < 2) {
                for (var i = 0; i < objects.length; ++i) {
                    var oapp = objects[i];
                    oapp.name[navigator.language] != data.name[navigator.language] && apps.push({
                        name: oapp.name[navigator.language],
                        rating: oapp.ratings.average,
                        author: data.author,
                        purchase_type: data.premium_type.charAt(0).toUpperCase() + data.premium_type.slice(1),
                        icon: oapp.icons[64],
                        id: oapp.id
                    });
                }
                objects.length > 2 && ($scope.more_other_apps = "View All ▸"), $scope.other_apps = apps;
            } else $scope.other_apps = !1;
        }), API.request("search", "?q=" + data.categories[0]).then(function(data) {
            for (var objects = data.objects, relatedapps = [], i = 0; 4 > i; ++i) {
                var oapp = objects[i];
                relatedapps.push({
                    name: oapp.name[navigator.language],
                    rating: oapp.ratings.average,
                    author: oapp.author,
                    purchase_type: oapp.premium_type.charAt(0).toUpperCase() + oapp.premium_type.slice(1),
                    icon: oapp.icons[64],
                    manifest: oapp.manifest_url,
                    app_type: oapp.app_type,
                    id: oapp.id
                });
            }
            $scope.relatedapps = relatedapps;
        });
    }), $scope.changeTabContent = function(e, eventFalse) {
        var content = document.querySelector("#tab-content");
        content.innerHTML = "";
        var target = null;
        target = eventFalse === !0 ? e : e.target;
        var triggers = document.getElementsByClassName("tabs")[0].children;
        console.log(triggers);
        for (var i = 0; 3 > i; ++i) triggers[i].className = "tab-trigger";
        switch ("H4" === target.tagName && (target = e.target.parentNode), target.className = "tab-trigger active", 
        target.getAttribute("data-tabname")) {
          case "description":
            if (eventFalse) var s = setInterval(function() {
                void 0 !== $scope.description && (content.innerHTML = $scope.description, clearInterval(s));
            }, 1e3); else content.innerHTML = $scope.description;
            break;

          case "screenshots":
            var previewWrap = document.createElement("div");
            previewWrap.className = "screenshots";
            for (var previews = $scope.previews, i = 0; i < previews.length; ++i) {
                var image = new Image();
                image.src = previews[i].image, image.setAttribute("large", previews[i].image), previewWrap.appendChild(image);
            }
            content.appendChild(previewWrap);
            break;

          case "releasenotes":
            null === $scope.release_notes && (content.innerHTML = "No release notes available");
        }
    }, API.request("ratings", "?app=" + id).then(function(data) {
        for (var reviews = [], i = 0; 4 > i; ++i) {
            var review = data.objects[i];
            review.body = $filter("LongCopyFilter")(review.body), reviews.push({
                copy: review.body,
                rating: review.rating,
                username: review.user.display_name
            });
        }
        $scope.reviews = reviews;
    });
    var tabs = document.getElementsByClassName("tab-trigger")[0];
    $scope.changeTabContent(tabs, !0), $scope.initPurchase = function(app_type, manifest) {
        var req = "";
        if (-1 === navigator.userAgent.search("Firefox")) return void alert("We're sorry, but apps within the Firefox Marketplace can only be downloaded from the Firefox browser");
        var final_manifest = "";
        final_manifest = void 0 !== manifest ? manifest : $scope.manifest, "hosted" === app_type ? req = navigator.mozApps.install(final_manifest) : "packaged" === app_type && (req = navigator.mozApps.installPackage(final_manifest)), 
        req.onsuccess = function() {
            console.log("Install process initiated");
        }, req.onerror = function() {
            console.log("Install process failed");
        };
    }, $scope.shareApp = function() {
        var buttons = document.querySelector("#share-buttons"), visible = buttons.getAttribute("isVisible");
        "true" === visible ? (TweenMax.to(buttons, .5, {
            opacity: 0,
            ease: "Power3.easeInOut",
            onComplete: function() {}
        }), buttons.setAttribute("isVisible", !1)) : (TweenMax.to(buttons, .5, {
            opacity: 1,
            ease: "Power3.easeInOut",
            onComplete: function() {}
        }), buttons.setAttribute("isVisible", !0));
    }, $scope.openModal = function(modalName) {
        console.log(modalName);
        var box = document.querySelector(modalName);
        box.className = box.className.replace("closed", ""), $rootScope.lockBody(), "0" === box.style.opacity && ($rootScope.lockBody(), 
        TweenMax.to(box, .4, {
            opacity: 1
        })), "#privacy" === modalName && $http({
            method: "GET",
            url: "https://marketplace.firefox.com/api/v1/apps/app/" + $scope.appid + "/privacy/"
        }).success(function(data) {
            $scope.privacy_policy = data.privacy_policy;
        }).error(function(data) {
            console.log("A error occured when fetching the privacy policy"), console.log(data);
        }), box.addEventListener("click", function(e) {
            "modalBox" === e.target.className && TweenMax.to(box, .5, {
                opacity: 0,
                onComplete: function() {
                    $rootScope.unlockBody(), box.className = "modal closed";
                }
            });
        });
    };
} ]), app.controller("CategoryViewController", [ "$scope", "API", "$rootScope", "$filter", function($scope, API, $rootScope, $filter) {
    function buildUrl(app) {
        var chars = app.split("");
        return "https://marketplace.cdn.mozilla.net/img/uploads/addon_icons/" + chars[0] + chars[1] + chars[2] + "/" + app + "-64.png?modified=crushed";
    }
    function swapApp(first) {
        var selector = document.querySelector("#in-view-featured"), app = null;
        first ? (app = fapps[0], currentIndex = 0, TweenMax.to(selector, 1.5, {
            opacity: 1
        })) : TweenMax.to(selector, 1, {
            opacity: 0,
            onComplete: function() {
                selector.innerHTML = "", 3 > currentIndex ? currentIndex++ : currentIndex >= 3 && (currentIndex = 0), 
                app = fapps[currentIndex];
                var appf = document.querySelectorAll(".featured-app")[currentIndex];
                selector.appendChild(appf.cloneNode(!0)), TweenMax.to(selector, 1, {
                    opacity: 1
                });
            }
        });
    }
    var category = window.location.href.split("/");
    category = category[category.length - 1];
    var title = document.querySelector("#category-title");
    title.innerHTML = category.charAt(0).toUpperCase() + category.slice(1);
    var currentIndex = 0, fapps = [];
    API.request("featured", "&cat=" + category).then(function(data) {
        for (var apps = $filter("DesktopApps")(data.objects), i = 0; 4 > i; ++i) apps[i].index = i, 
        fapps.push(apps[i]);
        $scope.featuredapps = fapps, swapApp();
    });
    var editorial = {
        staff_pics: {
            one: "421872",
            two: "374841",
            three: "366345"
        },
        top_three_games: {
            one: "427566",
            two: "502203",
            three: "490020"
        },
        workplace_apps: {
            one: "429326",
            two: "468749",
            three: "478633"
        }
    };
    $scope.test = {
        name: "apple",
        id: "mapple"
    }, $scope.editorial = editorial, $scope.staff_one = {
        id: editorial.staff_pics.one,
        image: buildUrl(editorial.staff_pics.one)
    }, $scope.staff_two = {
        id: editorial.staff_pics.two,
        image: buildUrl(editorial.staff_pics.two)
    }, $scope.staff_three = {
        id: editorial.staff_pics.three,
        image: buildUrl(editorial.staff_pics.three)
    }, $scope.games_one = {
        id: editorial.top_three_games.one,
        image: buildUrl(editorial.top_three_games.one)
    }, $scope.games_two = {
        id: editorial.top_three_games.two,
        image: buildUrl(editorial.top_three_games.two)
    }, $scope.games_three = {
        id: editorial.top_three_games.three,
        image: buildUrl(editorial.top_three_games.three)
    }, $scope.workplace_one = {
        id: editorial.workplace_apps.one,
        image: buildUrl(editorial.workplace_apps.one)
    }, $scope.workplace_two = {
        id: editorial.workplace_apps.two,
        image: buildUrl(editorial.workplace_apps.two)
    }, $scope.workplace_three = {
        id: editorial.workplace_apps.three,
        image: buildUrl(editorial.workplace_apps.three)
    }, API.request("apps_in_category", category).then(function(data) {
        var objects = data.objects, popular = [];
        objects.length % 4 !== 0 && objects.pop();
        for (var i = 0; i < objects.length; ++i) {
            var obj = {};
            obj.icon = objects[i].icons[64], obj.name = objects[i].name["en-US"], obj.id = objects[i].id, 
            obj.author = objects[i].author, obj.classname = "app", obj.rating = objects[i].ratings.average, 
            popular.push(obj);
        }
        $scope.popularapps = popular, $rootScope.loaded();
    }), API.request("apps_in_category", "&cat=" + category + "&sort=created").then(function(data) {
        console.log("RECENT :", data.objects);
        var objects = data.objects, popular = [];
        objects.length % 4 !== 0 && objects.pop();
        for (var i = 0; i < objects.length; ++i) {
            var obj = {};
            obj.icon = objects[i].icons[64], obj.name = objects[i].name["en-US"], obj.id = objects[i].id, 
            obj.author = objects[i].author, obj.classname = "app", obj.rating = objects[i].ratings.average, 
            popular.push(obj);
        }
        $scope.recentapps = popular;
    });
    var timer = setInterval(function() {
        -1 !== window.location.href.search("category") || clearInterval(timer);
    }, 1e4);
    $scope.toggleCategoryTypes = function(e) {
        if ("SPAN" === e.target.tagName) {
            for (var parent = e.target.parentNode, target = e.target, i = 0; i < parent.children.length; ++i) parent.children[i].className = "";
            var recentapps = document.querySelector(".category-recent");
            switch (target.className = "active", target.innerHTML) {
              case "Popular":
                recentapps.style.opacity = 0;
                break;

              case "Recent":
                recentapps.style.opacity = 1;
            }
        }
    };
} ]), app.controller("CollectionViewController", [ "$scope", "API", function($scope, API) {
    var collection = window.location.href.split("/");
    collection = collection[collection.length - 1], API.clientRequest("collections").then(function(data) {
        var collections = [], len = data.objects.length;
        console.log(data);
        for (var i = 0; len > i; ++i) {
            var collection = data.objects[i], obj = {
                name: collection.name[navigator.language],
                id: collection.id,
                description: collection.name[navigator.language],
                background: collection.background_color,
                slug: collection.slug,
                url: collection.url
            };
            null !== collection.background_image && (obj.background_image = collection.background_image), 
            collections.push(obj);
        }
        $scope.collections = collections;
    });
} ]), app.controller("home", [ "$rootScope", "API", "$scope", "$filter", "$http", "MasterSearch", function($rootScope, API, $scope, $filter, $http, MasterSearch) {
    function buildUrl(app) {
        var chars = app.split("");
        return "https://marketplace.cdn.mozilla.net/img/uploads/addon_icons/" + chars[0] + chars[1] + chars[2] + "/" + app + "-64.png?modified=crushed";
    }
    var editorial = {
        staff_pics: {
            one: "421872",
            two: "374841",
            three: "366345"
        },
        top_three_games: {
            one: "427566",
            two: "502203",
            three: "490020"
        },
        workplace_apps: {
            one: "429326",
            two: "468749",
            three: "478633"
        }
    };
    $scope.test = {
        name: "apple",
        id: "mapple"
    }, $scope.editorial = editorial, $scope.staff_one = {
        id: editorial.staff_pics.one,
        image: buildUrl(editorial.staff_pics.one)
    }, $scope.staff_two = {
        id: editorial.staff_pics.two,
        image: buildUrl(editorial.staff_pics.two)
    }, $scope.staff_three = {
        id: editorial.staff_pics.three,
        image: buildUrl(editorial.staff_pics.three)
    }, $scope.games_one = {
        id: editorial.top_three_games.one,
        image: buildUrl(editorial.top_three_games.one)
    }, $scope.games_two = {
        id: editorial.top_three_games.two,
        image: buildUrl(editorial.top_three_games.two)
    }, $scope.games_three = {
        id: editorial.top_three_games.three,
        image: buildUrl(editorial.top_three_games.three)
    }, $scope.workplace_one = {
        id: editorial.workplace_apps.one,
        image: buildUrl(editorial.workplace_apps.one)
    }, $scope.workplace_two = {
        id: editorial.workplace_apps.two,
        image: buildUrl(editorial.workplace_apps.two)
    }, $scope.workplace_three = {
        id: editorial.workplace_apps.three,
        image: buildUrl(editorial.workplace_apps.three)
    }, API.request("featured").then(function(data) {
        var apps = $filter("DesktopApps")(data.objects, 40), index = Math.floor(Math.random() * apps.length), featured = apps[index];
        featured.classname = featured.classname + " highlighted";
        for (var first = [], i = 0; 4 > i; ++i) first.push(apps[i]);
        $scope.featured_apps = first, $rootScope.loaded(function() {
            var parent = document.getElementById("HOME");
            angular.element(parent).removeClass("ajax");
        });
    }), $scope.initPurchase = function(app_type, manifest) {
        var req = "";
        if (-1 === navigator.userAgent.search("Firefox")) return void alert("We're sorry, but apps within the Firefox Marketplace can only be downloaded from the Firefox browser");
        var final_manifest = "";
        final_manifest = void 0 !== manifest ? manifest : $scope.manifest, "hosted" === app_type ? req = navigator.mozApps.install(final_manifest) : "packaged" === app_type && (req = navigator.mozApps.installPackage(final_manifest)), 
        req.onsuccess = function() {
            console.log("Install process initiated");
        }, req.onerror = function() {
            console.log("Install process failed");
        };
    }, $scope.searchApp = function() {
        var selector = document.querySelector("#search-home-result");
        TweenMax.to(selector, 1, {
            height: window.innerWidth,
            onComplete: function() {
                MasterSearch.query($scope), $rootScope.lockBody();
            }
        });
    }, $scope.appcategories = [ {
        name: "games",
        slug: "games"
    }, {
        name: "productivity",
        slug: "productivity"
    }, {
        name: "music",
        slug: "music"
    }, {
        name: "social",
        slug: "social"
    } ], $scope.closeSearch = function() {
        var selector = document.querySelector("#search-home-result");
        TweenMax.to(selector, 1, {
            height: 0,
            onComplete: function() {
                MasterSearch.query($scope), $rootScope.unlockBody();
            }
        });
    }, $scope.toggleCategoryTypes = function(e) {
        if ("SPAN" === e.target.tagName) {
            for (var parent = e.target.parentNode, target = e.target, i = 0; i < parent.children.length; ++i) parent.children[i].className = "";
            switch (target.className = "active", target.innerHTML) {
              case "Popular":
                $rootScope.$broadcast("CATEGORY_POPULAR");
                break;

              case "Recent":
                $rootScope.$broadcast("CATEGORY_RECENT");
            }
        }
    };
} ]), app.filter("LongCopyFilter", function() {
    return function(data, delimiter) {
        var charlimit = 150;
        delimiter = delimiter || " [...]";
        for (var review = data.split(" "), short_review = [], count = 0, i = 0; i < review.length; ++i) {
            var word = review[i], len = word.split("").length;
            count += len, charlimit > count && short_review.push(word);
        }
        return short_review[short_review.length - 1] += delimiter, short_review = short_review.join(" ");
    };
}), app.filter("FeaturedInCategory", function() {
    return function(data, length) {
        var apps = [], limit = 0;
        limit = length ? length : data.objects.length;
        for (var i = 0; limit > i; ++i) for (var obj = (data.objects[i].name["en-US"], {
            icon: data.objects[i].icons[64],
            name: data.objects[i].name["en-US"],
            id: data.objects[i].id,
            author: data.objects[i].author,
            classname: "app"
        }), a = 0; a < data.objects[i].device_types; ++a) "desktop" === data.objects[i].device_types[a] && (obj.device = "desktop", 
        apps.push(obj));
        return apps;
    };
}), app.filter("DesktopApps", function() {
    return function(data, length) {
        var apps = [], limit = 0;
        limit = length ? length : data.length;
        for (var i = 0; limit > i; ++i) for (var name = data[i].name["en-US"], obj = {}, a = 0; a < data[i].device_types.length; ++a) {
            var name = "";
            if (data[i].name.hasOwnProperty(navigator.language)) name = data[i].name[navigator.language]; else for (var z in data[i].name) name = data[i].name[z];
            "desktop" === data[i].device_types[a] && (obj.icon = data[i].icons[64], obj.app_type = data[i].premium_type, 
            obj.name = name, obj.id = data[i].id, obj.manifest_url = data[i].manifest_url, obj.premium_type = data[i].premium_type.charAt(0).toUpperCase() + data[i].premium_type.slice(1), 
            obj.author = data[i].author, obj.classname = "app", obj.rating = data[i].ratings.average, 
            data[i].hasOwnProperty("description") && (obj.description = data[i].description[navigator.language]), 
            obj.device = "desktop", apps.push(obj));
        }
        return apps;
    };
}), app.filter("htmlRender", function($sce) {
    return function(val) {
        return $sce.trustAsHtml(val);
    };
});

var app = angular.module("EditorialGenerator", [ "ui.router", "LocalStorageModule" ]);

app.controller("main", function($scope, $compile, $http) {
    function buildJSON() {
        for (var entries = document.getElementsByClassName("editorial-category"), build = [], i = 0; i < entries.length; ++i) {
            {
                var obj = {}, item = entries[i], title = item.children[0].children[1].value, copy = item.children[1].children[1].value;
                item.children[2];
            }
            obj.title = title, obj.copy = copy, obj.apps = [];
            for (var ids = item.children[2].getElementsByTagName("input"), a = 0; a < ids.length; ++a) obj.apps.push(ids[a].value);
            build.push(obj);
        }
        var req = $http({
            method: "post",
            url: "/saveeditorial",
            data: build
        });
        req.success(function(data) {
            console.log(data);
        }), req.error(function(data) {
            console.log(data);
        });
    }
    $scope.addItem = function() {
        var items = document.getElementsByClassName("editorial-item"), template = document.createElement("div");
        template.setAttribute("editorial-item", ""), template.setAttribute("data-index", items.length + 1), 
        template.className = "editorial-item";
        var newDirective = angular.element(template), container = document.getElementById("editorial-bits");
        newDirective.appendTo(container), $compile(newDirective)($scope);
    }, $scope.compile = function() {
        buildJSON();
    };
}), app.directive("editorialItem", function() {
    return {
        templateUrl: "/templates/editorialitem.html",
        controller: function() {},
        link: function($scope) {
            $scope.addNewApp = function(e) {
                var target = e.target.parentNode.getElementsByClassName("section appids")[0], inputs = target.getElementsByTagName("input"), input = document.createElement("input"), len = inputs.length + 1;
                input.placeholder = "Enter id " + len, target.appendChild(input);
            };
        }
    };
});