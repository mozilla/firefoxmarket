var app = angular.module("FireFoxMarket", [ "ui.router", "LocalStorageModule" ]);

app.config(function($stateProvider, $urlRouterProvider, $locationProvider, $httpProvider) {
    $urlRouterProvider.otherwise("/"), $locationProvider.html5Mode(!0), $stateProvider.state("home", {
        url: "/",
        templateUrl: "/templates/home.html"
    }), $stateProvider.state("AppNotFound", {
        url: "/app/notfound",
        templateUrl: "/templates/apps/404.html"
    }), $stateProvider.state("AppView", {
        url: "/app/:name",
        templateUrl: function() {
            return "/templates/apps/appview.html";
        },
        controller: "AppViewController"
    }), $stateProvider.state("CategoryView", {
        url: "/category/:name",
        templateUrl: function() {
            return "/templates/apps/catview.html";
        },
        controller: "CategoryViewController"
    }), $stateProvider.state("CollectionView", {
        url: "/collection",
        templateUrl: "/templates/apps/collectionview.html",
        controller: "CollectionViewController"
    }), $stateProvider.state("CollectionDetailView", {
        url: "/collection/:id",
        templateUrl: function() {
            return "/templates/apps/collectionDetail.html";
        },
        controller: "CollectionDetailView"
    }), delete $httpProvider.defaults.headers.common["X-Requested-Width"];
}), app.controller("main", function($window, $rootScope, API, localStorageService) {
    if (localStorageService.get("loggedin")) {
        {
            localStorageService.get("loggedin");
        }
        $rootScope.loggedin = !0;
    }
    $rootScope.login = function() {}, $rootScope.loaded = function(callback) {
        TweenMax.to(document.querySelector("#loader"), .2, {
            opacity: 0,
            onComplete: function() {
                callback();
            }
        });
    }, $rootScope.lockBody = function() {
        document.getElementsByTagName("html")[0].style.overflow = "hidden";
    }, $rootScope.unlockBody = function() {
        document.getElementsByTagName("html")[0].style.overflow = "scroll";
    };
}), app.factory("API", [ "Utils", "$http", "$q", "$timeout", function(Utils, $http, $q, $timeout) {
    function request(endpoint, parameters) {
        var deferred = $q.defer();
        return console.log("Need to run : " + endpoint), $timeout(function() {
            $http({
                method: "GET",
                url: "/marketplaceAPI/" + endpoint + " " + parameters
            }).success(function(data, status, headers, config) {
                data && deferred.resolve(data, status, headers, config);
            }).error(function(data, status, headers, config) {
                deferred.resolve(data, status, headers, config);
            });
        }, 100), deferred.promise;
    }
    function clientRequest(endpoint, parameters) {
        var deferred = $q.defer();
        return console.log("Need to run : " + endpoint), $timeout(function() {
            for (var i in routes) if (endpoint === i) {
                var url = base + routes[endpoint];
                console.log(url), parameters && (url += parameters), $http({
                    method: "GET",
                    url: url
                }).success(function(data, status, headers, config) {
                    data && deferred.resolve(data, status, headers, config);
                }).error(function(data, status, headers, config) {
                    deferred.resolve(data, status, headers, config);
                });
            }
        }, 100), deferred.promise;
    }
    var routes = {
        app: "/api/v1/fireplace/app/{0}/?cache=1&vary=0",
        "app/privacy": "/api/v1/apps/app/{0}/privacy/?cache=1&vary=0",
        category: "/api/v1/fireplace/search/featured/?cat={0}&cache=1&vary=0",
        collection: "/api/v1/fireplace/collection/{0}/?cache=1&vary=0",
        reviews: "/api/v1/apps/rating/",
        review: "/api/v1/apps/rating/{0}/",
        settings: "/api/v1/account/settings/mine/",
        installed: "/api/v1/account/installed/mine/",
        login: "/api/v1/account/login/",
        "fxa-login": "/api/v1/account/fxa-login/",
        logout: "/api/v1/account/logout/",
        newsletter: "/api/v1/account/newsletter/",
        record_free: "/api/v1/installs/record/",
        record_paid: "/api/v1/receipts/install/",
        app_abuse: "/api/v1/abuse/app/",
        search: "/api/v1/fireplace/search/?cache=1&vary=0",
        feedback: "/api/v1/account/feedback/",
        consumer_info: "/api/v1/fireplace/consumer-info/",
        features: "/api/v1/apps/features/",
        prepare_nav_pay: "/api/v1/webpay/prepare/",
        payments_status: "/api/v1/webpay/status/{0}/",
        collections: "/api/v2/feed/collections/",
        featured: "/api/v1/fireplace/search/featured/?limit=100",
        app_detail: "/api/v1/apps/app/",
        search: "/api/v1/apps/search/",
        login: "",
        collections_detail: "/api/v2/feed/collections/"
    }, base = "https://marketplace.firefox.com";
    return {
        clientRequest: clientRequest,
        request: request
    };
} ]), app.factory("keys", function() {
    return {
        SHIFT: 16,
        CONTROL: 17,
        ALT: 18,
        PAUSE: 19,
        CAPS_LOCK: 20,
        ESCAPE: 27,
        ENTER: 13,
        PAGE_UP: 33,
        PAGE_DOWN: 34,
        LEFT: 37,
        UP: 38,
        RIGHT: 39,
        DOWN: 40,
        HOME: 36,
        END: 35,
        COMMAND: 91,
        WINDOWS_RIGHT: 92,
        COMMAND_RIGHT: 93,
        WINDOWS_LEFT_OPERA: 219,
        WINDOWS_RIGHT_OPERA: 220,
        APPLE: 24
    };
}), app.factory("Utils", function() {
    function baseurl(url) {
        return url.split("?")[0];
    }
    function encodeURIComponent(uri) {
        return window.encodeURIComponent(uri).replace(/%20/g, "+");
    }
    function decodeURIComponent(uri) {
        return window.decodeURIComponent(uri.replace(/\+/g, " "));
    }
    function urlparams(url, kwargs) {
        return baseurl(url) + "?" + urlencode(_.defaults(kwargs, querystring(url)));
    }
    return {
        baseurl: baseurl,
        encodeURIComponent: encodeURIComponent,
        decodeURIComponent: decodeURIComponent,
        urlparams: urlparams
    };
}), app.directive("appsearch", [ "$http", "$rootScope", function($http, $rootScope) {
    return {
        templateUrl: "/templates/searchbox.html",
        controller: function() {},
        link: function($scope) {
            $scope.search = function() {
                TweenMax.to(document.getElementById("searchresults"), 1, {
                    top: 0,
                    ease: "Power3.easeInOut",
                    onComplete: function() {
                        $rootScope.lockBody();
                    }
                });
            }, $scope.searchApp = function() {
                var term = document.getElementById("searchterm");
                return "" == term.value ? (console.log("no search term entered"), !1) : void $http({
                    method: "GET",
                    url: "https://marketplace.firefox.com/api/v1/apps/search/?q=" + term.value + "&device=desktop"
                }).success(function(data) {
                    for (var results = [], len = data.objects.length, i = 0; len > i; ++i) {
                        var obj = data.objects[i], newobj = {
                            name: obj.name[navigator.language],
                            icon: obj.icons[64],
                            id: obj.id
                        };
                        results.push(newobj);
                    }
                    $scope.results = results;
                }).error(function() {
                    console.error("Something went wrong with the search");
                });
            };
        }
    };
} ]), app.directive("footer", function() {
    return {
        templateUrl: "templates/footer.html",
        controller: function() {},
        link: function() {}
    };
}), app.directive("header", function() {
    return {
        templateUrl: "/templates/header.html",
        controller: function() {},
        link: function() {}
    };
}), app.directive("login", [ "$http", function($http) {
    var currentUser = null;
    return {
        templateUrl: "/templates/login.html",
        controller: function() {},
        link: function($scope) {
            $scope.login = function() {
                navigator.id.request();
            }, $scope.logout = function() {
                navigator.id.logout();
            }, navigator.id.watch({
                loggedInUser: currentUser,
                onlogin: function(assertation) {
                    $http.post("/loginassert", {
                        assertation: assertation,
                        audience: window.location.href
                    }).success(function(data) {
                        console.log(data);
                    }).error(function(data) {
                        console.log("issue with verification process"), console.log(data);
                    });
                },
                onlogout: function() {
                    currentUser = null;
                }
            });
        }
    };
} ]), app.controller("AppViewController", [ "$window", "API", "$scope", "$rootScope", function($window, API, $scope, $rootScope) {
    var id = $window.location.href.split("/");
    id = id[id.length - 1], API.request("app_detail", id).then(function(data) {
        $scope.author = data.author, $scope.categories = data.categories, $scope.content_ratings = data.content_ratings, 
        $scope.name = data.name[navigator.language];
        for (var previews = [], i = 0; i < data.previews.length; ++i) {
            var preview = {
                image: data.previews[i].image_url,
                thumb: data.previews[i].thumbnail_url
            };
            previews.push(preview);
        }
        $scope.previews = previews, $scope.privacy = "http://marketplace.firefox.com" + data.privacy_policy, 
        $scope.support_email = data.support_email[navigator.language], $scope.support_url = data.support_url[navigator.language], 
        $scope.tags = data.tags, $scope.versions = data.versions, $rootScope.loaded();
    });
} ]), app.controller("CategoryViewController", [ "$scope", "API", "$rootScope", "$filter", function($scope, API, $rootScope, $filter) {
    var category = window.location.href.split("/");
    category = category[category.length - 1], API.request("apps_in_category", category).then(function(data) {
        var apps = $filter("DesktopApps")(data);
        $scope.apps = apps;
    });
} ]), app.controller("CollectionDetailView", [ "$window", "API", function($window, API) {
    var id = $window.location.href.split("/");
    id = id[id.length - 1], API.clientRequest("collections_detail", id).then(function(data) {
        console.log(data);
    });
} ]), app.controller("CollectionViewController", [ "$scope", "API", function($scope, API) {
    var collection = window.location.href.split("/");
    collection = collection[collection.length - 1], API.clientRequest("collections").then(function(data) {
        var collections = [], len = data.objects.length;
        console.log(data);
        for (var i = 0; len > i; ++i) {
            var collection = data.objects[i], obj = {
                name: collection.name[navigator.language],
                id: collection.id,
                description: collection.name[navigator.language],
                background: collection.background_color,
                slug: collection.slug,
                url: collection.url
            };
            null !== collection.background_image && (obj.background_image = collection.background_image), 
            collections.push(obj);
        }
        $scope.collections = collections;
    });
} ]), app.controller("MyApps", function() {
    navigator.mozApps.getInstalled();
}), app.controller("home", [ "$rootScope", "API", "$scope", "$filter", function($rootScope, API, $scope, $filter) {
    var current_category = "", is_showing_category = !1;
    API.clientRequest("featured").then(function(data) {
        var apps = $filter("DesktopApps")(data, 10);
        $scope.featured_apps = apps, $rootScope.loaded(function() {
            var parent = document.getElementById("HOME");
            angular.element(parent).removeClass("ajax");
        });
    }), API.request("categories").then(function(data) {
        $scope.categories = data.objects;
    }), $scope.showCategory = function(e) {
        current_category = e.target.getAttribute("data-slug");
        var params = "?cat=" + current_category;
        is_showing_category === !0 && (TweenMax.to(document.querySelector(".category-wrap"), 1, {
            opacity: 0
        }), is_showing_category = !1), API.clientRequest("search", params).then(function(data) {
            var apps = $filter("DesktopApps")(data, 10);
            console.log(apps), $scope.category_apps = apps, is_showing_category === !1 && (TweenMax.to(document.querySelector(".category-wrap"), 1, {
                opacity: 1
            }), is_showing_category = !0);
        });
    };
} ]), app.filter("CollectionFilter", function() {
    var CollectionFilter = function() {};
    return CollectionFilter;
}), app.filter("DesktopApps", function() {
    return function(data, length) {
        var apps = [], limit = 0;
        limit = length ? length : data.objects.length;
        for (var i = 0; limit > i; ++i) {
            for (var obj = (data.objects[i].name["en-US"], {
                icon: data.objects[i].icons[64],
                name: data.objects[i].name["en-US"],
                id: data.objects[i].id,
                author: data.objects[i].author
            }), a = 0; a < data.objects[i].device_types; ++a) "desktop" === data.objects[i].device_types[a] && (obj.device = "desktop");
            apps.push(obj);
        }
        return apps;
    };
});